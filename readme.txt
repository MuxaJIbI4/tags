1) Общие понятия, связанные с контентом и его хранением.
Сочетание content/title/release составляет атомарную единицу контента.
1.1 content (контент) - тип,к которому относится хранимая информация - видео, игры, программы, музыка, книги и т.д.
1.2 title (тайтл) - это единичный (абстрактный) экземпляр контента (фильм, сериал, программа, альбом, книга). Он содержит его неотъемлемые свойства - имя, год выпуска, жанр и другие - которые не различаются между релизами.
1.3 release: описывает конкретный экземпляр тайтла (физические данные, хранящиеся на носителе информации). Различные релизы тайтла отличаются между собой характерными особенностями собственно данных - языком озвучки или текста, качеством график или аудио, релиз-группой и т.п.
Релиз может быть сезоном или эпизодом сериала.
Релиз может включать в себя несколько тайтлов (пример: репак игры). В таком случае он как бы является релизом для каждого тайтла по-отдельности. У него есть своё релиз-имя (***** Collection), год выпуска и вообще он представляет собой особенный тайтл.



2). Описание работы скрипты tags.pl.

2.1 Предназначение:
Скрипт предназначен для управления контентом: 
	1) определение тайтла путём поиска во внешних базах по критериям (имя, год выпуска)
	2) хранение подробной информации о тайтле/релизе в файле метаданных
	3) автоматическое создание имени тайтла/релиза на основе метаданных
	4) создание структурированной с использованием тэгов коллекции контента с помощью симлинков.
	5) хранение информации из внешних БД в локальной базе,
	6) массовое обновление информации в локальной базе и последующее автообновление соответствующих данных в файлах метаданных.

2.2 Основные функции

2.2.1 Поиск во внешних источниках.
Когда встречатся папка с неизвестным содержимым (известно только предполагаемый вид контента - например видео или игры), то требуется по имени определить, что находится внутри.
Скрипт позволяет подключить плагины для поиска во внеших источниках. Для видео такими источниками являются imdb.com и kinopoisk.ru. 
Плагины выполняютс поиск сходным образом:
	- выбирается возможное название тайтла
	- создаётся url страницы поиска
	- это страница, загружается, парсится и выводится список тайтлов из которого надо выбрать искомый. Существует вероятность, что источник найдёт и переправит нас на единственный возможный вариант, и это учитывается. также возможен вариант, когда не будет найден ни один вариант, и поиск придётся проводить вручную
	- выбрать нужный тайтл можно введя номер в списке результатов или введя код тайтла в источнике напрямую (TODO - надо различать эти два варианты). также можно выбрать вариант пропуска плагина.
	после выбора тайтла страница с ним загружается, парсится и возвращаются его свойства. Возможно значения некоторых свойств (например eng orig name в imdb) нужно будет выбрать из нескольких вариантов. Такой выбор запоминаетсяв тэге _protected (смотри п3)
Когда тайтл найден, следующий поиск ведётся с использованием полученной информации. Например, определив код фильма в imdb.com, можно сразу же определить код этого фильма в kinopoisk.ru, если он уже встречался раньше а коллекции и записан в базе. И даже если нет, всё равно правильное имя и год выпуска весьма полезны.

2.2.2 Хранение подробной информации о тайтле/релизе в файле метаданных
Файл метаданных - небольшой текстовый файл, который содержит информацию о тайтле, записанную в виде, удобном для чтение и редактирования. Таким образом, этот файл является частью распределённой базы данных коллекции. С другой стороны он содержит срезы j,ob[ БД, касающиеся данного тайтла/релиза.
В данном реализации используется формат YAML. Он позволяет использовать вложенные тэги, легко парсится, и имеет простые правила форматирования. Подробнее смотрите п3.

2.2.3 Автоматическое создание имени тайтла/релиза на основе метаданных.
Скрипт позволяет создавать имя тайтла/релиза на основе тэгов в файле метаданных по заданной схеме. Смотри п4).Имена файлов.

2.2.4 Создание структурированной с использованием тэгов коллекции контента с помощью симлинков.
Позволяет создавать папки с определённм значением тэга: по годам выпуска, по языку аудио, по качеству, по жанрам, по режиссёрам, по актёрам и т.п. Лишь бы тэг был задан.

2.2.5 Хранение информации из внешних БД в локальной базе
TODO

2.2.6 Массовое обновление информации в локальной базе и последующее автообновление соответствующих данных в файлах метаданных.
TODO

3) Файл метаданных (.info)
Предназначен 
- для хранения инфы о данных


index - значение, под которым Т. хранится в базе
code - однозначно характеризует Т. во внешней базе.
В большинстве случаев index == code (для удобства)



4) Имена файлов
Правильное имя папки с тайтлом/релизом позволяет быстро оценить понять, что находится в ней.
3.1. Имя тайтла.
Имя тайтла состоит из двух частей - обязательной и необязательной, разделённых пробелом
3.1.2 Обязательная часть
	- содержит имена тайтла (английское, русское, оргиинальное)
	- начинается с имени за который следуют другие, заключённые в скобки для удобства и разделённые пробелами
	- порядок имён определяется отдельно: en [ru], en [ru] [orig] и может отличаться в зависимости от происхождения (origin) тайтла (для русского ru идёт вначале), или параметра языка (eng: en [ru], rus: ru [en])
	- возможен запрет повторения похожих имён (которые не отличаются своими составными частями, состоящими только из букв и не являющимися артиклями)
3.1.3 Необязательная часть
	- состоит из нескольких частей, каждая из которых явлется одним из свойств тайтла, заключённым в скобки (настраиваются свои для каждого свойства), и разделённых разделителем ('', настраивается)
3.2 Имя релиза.
Имя релиза в лющем состоит из мени тайтала + имя релиза. Поэтому рассмотрим только вторую часть.
	- содержит свойства релиза (язык, качество, и др.), разделённые заданным разделителем.
	  Например: en,ru   hdtv.en,ru    s01.hdtv.ru.novafilm   en,ru.Director's cut

5) Symlinks


6) БД и плагины


















Приложение 1. YAML - YAML Ain't Markup Language
YAML - это язык сериализации данных, который отлично работает с современными языками программирования и их комплексными структурами данных (хеши массивов, хеши хешэй и др.).

Массив - последовательность значений
- Mark McGwire
- Sammy Sosa
- Ken Griffey

Хэш (пары ключ: значение)
hr:  65
avg: 0.278
rbi: 147


Хэш массивов
american:
  - Boston Red Sox
  - Detroit Tigers
  - New York Yankees
national:
  - New York Mets
  - Chicago Cubs
  - Atlanta Braves

Массив хэшей
-
  name: Mark McGwire
  hr:   65
  avg:  0.278
-
  name: Sammy Sosa
  hr:   63
  avg:  0.288
  


Коллекции

Массив
- apple 
- banana 
- carrot 
>>
['apple', 'banana', 'carrot']

Вложенный массив
- 
 - foo 
 - bar 
 - baz 

>>
[['foo', 'bar', 'baz']]

Смешанный массив
- apple 
- 
 - foo 
 - bar 
 - x123 
- banana 
- carrot 
>>
['apple', ['foo', 'bar', 'x123'], 'banana', 'carrot']

Глубоко вложенный массив
- 
 - 
  - uno 
  - dos 
>>
[[['uno', 'dos']]]



Хэш
foo: whatever 
bar: stuff 
>>
{ 'foo' => 'whatever', 'bar' => 'stuff' }

Значением хэша может быть массив
foo: whatever 
bar: 
 - uno 
 - dos 
>>
{ 'foo' => 'whatever', 'bar' => [ 'uno', 'dos' ] }

или другой хэш
foo: whatever 
bar: 
 fruit: apple 
 name: steve 
 sport: baseball 
>>
{ 'foo' => 'whatever',  
  'bar' => { 
     'fruit' => 'apple',  
     'name' => 'steve', 
     'sport' => 'baseball' 
   } 
} 










Встроенные коллекции
Первая строчка - запись в формате YAML, вторая - как это выглядит с точки зрения языка программирования (Perl в данных примерах).

Массив:
seq: [ a, b, c ]
{ 'seq' => [ 'a', 'b', 'c' ] }

Хэш:
hash: { name: Steve, foo: bar } 
{ 'hash' => { 'name' => 'Steve', 'foo' => 'bar' } } 

Многострочные коллекции
>>
languages: [ Ruby, 
             Perl, 
             Python ] 
websites: { YAML: yaml.org, 
            Ruby: ruby-lang.org, 
            Python: python.org, 
            Perl: use.perl.org } 
>>
{ 'languages' => [ 'Ruby', 'Perl', 'Python' ], 
  'websites' => { 
    'YAML' => 'yaml.org', 
    'Ruby' => 'ruby-lang.org', 
    'Python' => 'python.org', 
    'Perl' => 'use.perl.org'  
  } 
}

Массив массивов: [tag1, tag2, tag3] 
- [name        , hr, avg  ]
- [Mark McGwire, 65, 0.278]
- [Sammy Sosa  , 63, 0.288]

Хэш хэшей: {tag1, tag2, tag3}
Mark McGwire: {hr: 65, avg: 0.278}
Sammy Sosa: {
    hr: 63,
    avg: 0.288
  }
